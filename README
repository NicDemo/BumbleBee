
<p>
Branch main is sequencial one.
As promise a constructor easy to use 
--Constructor sequencial : Bumblebees(Objective obj, long MaxTime)

how to use ? same as RandomWalk create an object and apply its optimize() method.

Branch Multi use multithreading
Constructor : Multipass(Objective obj, long Maxtime)

how to use ?
	 same as RandomWalk, optimize prints the found value.

How it is implemented ? 

	We build 3 copy of a same world (ie Bumblebees) which shares 10 of their best solutions
	which are use to create some new bee in the different world. 
	they 're is a semaphore for each case of the shared array to gain speed and to not to block the entire shared ressource.

Advantages : 
	-'It introduce a good diversity of solution to avoid local maximum.'
	-'not this much concurrent problem possibility (only in Data[] which is the shared memory'
	- 'easily threads scalable, the number of threads can be easily reduced or raise by adding a new agent into the implementation and addapt size of 
		shared memory in order to no to loose too many times cause of different access to each part of the array.'
'
Drawbacks : 
	-'the data[] object got a bit much of access from the different agent using it 
		but it is acceptable'


comparing to sequencial mode : 
		-we got a little problem of diversity due to some parts of our based algorithm which can in some times cause local maxima,
		the reap method has to be adapted for each problem as the lifespan ones so  We've quite replaced this with a generic one 
		 with a potential chance to improve the life of the bee if it success its mutation but il could be even better.

		-the threaded one is quite well fixing this problem thanks to aggresives mutation coupled with the shares between the 3 worlds.

Bests.
Merry christmas.
happy new year.
            	  .88888888:. 
                88888888.88888. 
              .8888888888888888. 
              888888888888888888 
              88' _`88'_  `88888 
              88 88 88 88  88888 
              88_88_::_88_:88888 
              88:::,::,:::::8888 
              88`:::::::::'`8888 
             .88  `::::'    8:88. 
            8888            `8:888. 
          .8888'             `888888. 
          .8888:..  .::.  ...:'8888888:. 
        .8888.'     :'     `'::`88:88888 
       .8888        '         `.888:8888. 
      888:8         .           888:88888 
    .888:88        .:           888:88888: 
    8888888.       ::           88:888888 
    `.::.888.      ::          .88888888 
   .::::::.888.    ::         :::`8888'.:. 
  ::::::::::.888   '         .:::::::::::: 
  ::::::::::::.8    '      .:8::::::::::::. 
 .::::::::::::::.        .:888::::::::::::: 
 :::::::::::::::88:.__..:88888:::::::::::' 
  `'.:::::::::::88888888888.88:::::::::' 
        `':::_:' -- '' -'-' `':_::::'`  
    

						                                    </p>                                                                                                         
                                                                                                                                                      
                                                                                                                                                      
